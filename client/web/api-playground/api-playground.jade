template(name='apiPlayground')

	.api.container-fluid

		#nav

			ul.nav.nav-pills.nav-stacked
				li
					a(href='#top') Home
				li
					a(href='#connection') Connection
				li
					a(href='#users') Users
				li
					a(href='#contacts') Contacts
				li
					a(href='#calendars') Calendars
				li
					a(href='#events') Events
				li
					a(href='#attendees') Attendees
				li
					a(href='#tags') Tags
				li
					a(href='#likes') Likes
				li
					a(href='#subscriptions') Subscriptions

		#doc

			.jumbotron#top
				h1 get-high
					br
					small API playground
				em The order of the doc structured can also be use for the order of procedure on a client.

			.cat#connection
				h2
					span.label.label-default Connection
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Test DDP connection
						.panel-body
							p Make sure client server connection is established before proceed.
							ul
								li Need to set up basic url and ssl configurations
								li For https use wss://, for http use ws://
								li No login or authentication required for this test
						table.table
							tbody
								tr
									th Method
									td
										code conn.test
									td
								tr
									th Params
									td 
										code
									td None
								tr
									th Return
									td
										code
									td Print connection result to console
					button.btn.btn-default#connectionTestButton DDP Connection Test

			.cat#users
				h2
					span.label.label-default Users
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Login with google
						.panel-body
							p Login user with google accounts. Clients should have specific login methods with Google servises comes from DDP library.
							ul
								li Client_id for backend is used here
						table.table
							tbody
								tr
									th Method
									td Depending on clients
								tr
									th Params
									td Depending on clients
								tr
									th Return
									td See results below
					img(src="#{currentUser.services.google.picture}")
					if currentUser
						span #{currentUser.services.google.given_name}
						br
						button.btn.btn-default#logout Logout
					else
						button.btn.btn-default#google-login Login with Google

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Login with token
						.panel-body
							p Login user with last token to restore previous session.
							ul
								li !!! TOKEN IS NOT HASHED TOKEN FOUND IN USER OBJECT !!!
								li !!! TOKEN WILL BE RETURNED ON LOGIN WITH CLIENTS !!!
								li Token is not what google api returned but on our server.
								li Token is set to never expire.
						table.table
							tbody
								tr
									th Method
									td
										code users.loginWithToken
									td
								tr
									th Params
									td
										code {String}
									td Token (hashedToken)
								tr
									th Return
									td See results below
									td
					form.form-inline
						input.form-control#token(placeholder='Token')
						button.btn.btn-default#loginWithTokenButton Token
					em If you get the token from a mobile client, and use it to login on the API Playground, you will be able to restore the same session on the mobile clients. But be sure not to logout before using the token or it will tell you user not logged in.


				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Current user
						.panel-body
							p Get the current logged in user on the server.
						table.table
							tbody
								tr
									th Method
									td
										code users.currentUser
									td
								tr
									th Params
									td
									td None
								tr
									th Return
									td
										code {Object}
									td Current user object (user collection)
					button.btn.btn-default#checkLoggedInButton Get Current User

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set user school
						.panel-body
							p After use first register, that sould come after the login or register phase when the user get to choose a school name.
							ul
								li !!! USER MUST HAVE SELECTED SCHOOL BEFORE USING CALENDARS AND EVENTS !!!
						table.table
							tbody
								tr
									th Method
									td
										code users.setSchool
									td
								tr
									th Params
									td
										code {String}
									td School name
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#schoolName(placeholder='School name')
						button.btn.btn-default#setSchoolNameButton Set School

			.cat#contacts
				h2
					span.label.label-default Contacts
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Retrieve contacts
						.panel-body
							p Get contacts from google as well as updating contacts associated with current user in our database.
							ul
								li !!! WIPE! !!!
								li Google does not support sync only updates, so every time this method being called will result in a wipe of all contacts associated with the user.
						table.table
							tbody
								tr
									th Method
									td
										code contacts.retrieve
									td
								tr
									th Params
									td 
										code
									td None
								tr
									th Return
									td
										code
									td Does not matter
					button.btn.btn-default#retrieveContactsButton Retrieve Contacts

			.cat#calendars
				h2
					span.label.label-default Calendars
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Get calendar list
						.panel-body
							p Get a list of all calendars {owned} by the current user. When doing init calendars and sync calendars, calendar Id is required returned from this function.
							ul
								li Only calendars owned by user will be returned, that is no editor or other types.
								li In returned objects, id is the one used to identify calendar by google, we will use this id as our unique id in our database.
								li !!! DO NOT USE ID 'primary' ANY TIME BECAUSE IT WILL RUIN OTHER CALENDAR SINCE IT IS NOT UNIQUE !!!
						table.table
							tbody
								tr
									th Method
									td
										code calendars.list
									td
								tr
									th Params
									td
										code
									td None
								tr
									th Return
									td
										code {[Object]}
									td An array of calendars with id and other information returned from google
					button.btn.btn-default#getCalendarListButton Get Calendar List

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Init calendar
						.panel-body
							p Init will wipe the current calendar stored in our database and clear all the events belongs to it. Then it will initialize a full request to Google Calendar API to receive and insert the calendar itself and associated events.
							ul
								li !!! WIPE! ONLY INIT ON CREATION CREATION FIRST TIME OR BROKEN !!!
								li !!! USING 'primary' AS 'calendarId' IS RISTRICTED !!!
								li !!! USER SCHOOL MUST BE ASSIGNED BEFORE MAKING THIS CALL !!!
						table.table
							tbody
								tr
									th Method
									td
										code calendars.init
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Calendar Id from google, NO 'primary'
								tr
									td
										code {[String]}
									td Array of tags which will be the default tags assigned to all associated event initially
								tr
									th Return
									td
										code {Object}
									td Does not matter
					form.form-inline
						input.form-control#calendarId(placeholder='Calendar ID')
						input.form-control#calendarInitTags(placeholder='Default calendar tags')
						button.btn.btn-default#initCalendarButton Init Calendar
					em For testing purpose with this API Playground, seperate tags by ',' in the above input, no space.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Sync Calendar
						.panel-body
							p Sync calendar and update all associated events.
							ul
								li Sync will use the existing nextSyncToken (syncToken) stored with the calendar to call Google events API.
								li Calendar's nextSyncToken will be updated for next sync.
								li Events associated with the calendar that has changed will be updated.
								li Events' visibility and tags will NOT be overwritten.
						table.table
							tbody
								tr
									th Method
									td
										code calendars.sync
									td
								tr
									thParams
									td
										code {Stirng}
									td Calendar Id
								tr
									th Return
									td
										code {Object}
									td Does not matter
					form.form-inline
						input.form-control#calendarSyncId(placeholder='Calendar ID')
						input.form-control#calendarSyncUserId(placeholder='User ID')
						button.btn.btn-default#syncCalendarButton Sync Calendar
					em For clients just leave userId blank (calling without passing userId) because it is automatically configured.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Watch calendar
							strong(style='color:red') DO NOT CALL
						.panel-body
							p Watch calendar will establish a notification channel between google and our server. Whenever there is a event change, our sever will be notified and execute a calendar.sync.
							ul
								li !!! DON'T CALL THIS ON CLIENT !!!
								li !!! ALWAYS UNWATCH AFTER DONE TESTING !!!
								li Only for api demonstration, should not be called by clients since it will be execute along with calendar initiations.
						table.table
							tbody
								tr
									th Method
									td
										code calendars.watch
									td
								tr
									th Params
									td
										code {Stirng}
									td Calendar Id from google, NO 'primary'
								tr
									th Return
									td
										code {Object}
									td HTTP res from google
					form.form-inline
						input.form-control#calendarWatchId(placeholder='Calendar ID', disabled)
						button.btn.btn-default#calendarWatchButton(disabled) Watch Calendar

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Unwatch calendar
							strong(style='color:red') DO NOT CALL
						.panel-body
							p Unwatch a calendar. Stop receiving notifications on events changes from google notification channel.
							ul
								li Only for api demonstration, should not be called by clients since it will be execute along with calendar initiations.
						table.table
							tbody
								tr
									th Method
									td
										code calendars.unwatch
									td
								tr
									th Params
									td
										code {Stirng}
									td Calendar Id from google, NO 'primary'
								tr
									th Return
									td
										code {Object}
									td HTTP res from google
					form.form-inline
						input.form-control#calendarUnwatchId(placeholder='Calendar ID')
						button.btn.btn-default#calendarUnwatchButton Unwatch Calendar

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Unwatch channel
						.panel-body
							p Unwatch a channel (calendar in this case).
						table.table
							tbody
								tr
									th Method
									td
										code channels.unwatch
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Channel ID (calendar's _id)
								tr
									td
										code {String}
									td Resource ID
								tr
									th Return
									td
										code {Object}
									td HTTP res from google
					form.form-inline
						input.form-control#channelId(placeholder='Channel ID')
						input.form-control#resourceId(placeholder='Resourse ID')
						button.btn.btn-default#channelUnwatchButton Unwatch Calendar
					em Channel ID is just Calendar's _id.

			.cat#events
				h2
					span.label.label-default Events
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Insert event
						.panel-body
							p Insert a event to selected calendar.
							ul
								li A 'calendar.sync' is excuted by the server after a successful insertion
						table.table
							tbody
								tr
									th Method
									td
										code events.insert
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Calendar Id (not _id)
								tr
									td
										code {Object}
									td event
								tr
									th Return
									td
										code {Object}
									td Does not matter
					pre
						code.
							{
								summary: {String},
								description: {String}?,
								start: {
									dateTime: {Date} # format RFC3399
								},
								end: {
									dateTime: {Date} # format RFC3399
								},
								location: {String}?,
								visibility: {String}?
							}
					form.form-inline
						input.form-control#insertEventCalendarId(placeholder='Calendar ID')
						input.form-control#insertEventSummary(placeholder='Summary')
						input.form-control#insertEventStart(placeholder='Start')
						input.form-control#insertEventEnd(placeholder='End')
						button.btn.btn-default#insertEventButton Insert Event
					em In client methods calls, please provide more attributes of the event object.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Update event
						.panel-body
							p Update an event on google server with its id.
							ul
								li A 'calendar.sync' is excuted by the server after a successful update
						table.table
							tbody
								tr
									th Method
									td
										code events.update
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Event Id (not _id)
								tr
									td
										code {Object}
									td event
								tr
									th Return
									td
										code {Object}
									td Does not matter
					pre
						code.
							{
								summary: {String}?,
								description: {String}?,
								start: {
									dateTime: {Date}? # format RFC3399
								},
								end: {
									dateTime: {Date}? # format RFC3399
								},
								location: {String}?,
								visibility: {String}?
							}
					form.form-inline
						input.form-control#updateEventId(placeholder='Event ID')
						input.form-control#updateEventSummary(placeholder='Summary')
						input.form-control#updateEventDescription(placeholder='Description')
						input.form-control#updateEventLocation(placeholder='Location')
						input.form-control#updateEventStart(placeholder='Start')
						input.form-control#updateEventEnd(placeholder='End')
						button.btn.btn-default#updateEventButton Update Event
					em If above params are left blank, fileds will not change and remains the old value.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Delete event
						.panel-body
							p Delete a event from its associated calendar.
							ul
								li A 'calendar.sync' is excuted by the server after a successful insertion
						table.table
							tbody
								tr
									th Method
									td
										code events.delete
									td
								tr
									th Params
									td
										code {Stirng}
									td Event Id (not _id)
								tr
									th Return
									td
										code {Object}
									td Does not matter
					form.form-inline
						input.form-control#deleteEventId(placeholder='Event ID')
						button.btn.btn-default#deleteEventButton Delete Event

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set event's visibility
						.panel-body
							p Change event's visibility through google api as well as updating in our own server. Users will get events feeds that are public or default.
							ul
								li Default can't be set by us neither the user, only first time on creation without assign a visibility.
								li Only string in ['public', 'private', 'confidential'] can be passed.
								li A calenders.sync call is automatically executed after a success update, so calendar in our database will catch the update.
						table.table
							tbody
								tr
									th Method
									td
										code events.setVisibility
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Event Id (not _id)
								tr
									td
										code {String}
									td Visibility ['public', 'private', 'confidential']
								tr
									th Return
									td
										code {Object}
									td Does not matter
					form.form-inline
						input.form-control#setEventVisibilityId(placeholder='Event ID')
						select.form-control#setEventVisibilityType
							option(value='public') public
							option(value='private') private
							option(value='confidential') confidential
						button.btn.btn-default#setEventVisibilityButton Set Visibility

			.cat#attendees
				h2
					span.label.label-default Attendees & Invitations
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Get Attendees
						.panel-body
							p Get attendees of a certain event.
							ul
								li Preprcess attendees result.
								li Will indicate response status.
								li Will indicate whether the user has registered with our app.
						table.table
							tbody
								tr
									th Method
									td
										code attendees.get
									td
								tr
									th Params
									td
										code {Stirng}
									td Event ID
								tr
									th Return
									td
										code {Object}
									td The actual Tag list as a JSON/JS object
					pre
						code.
							{
								email: {String},
								displayName: {String}?,
								// responseStatus
								// needsAction -> hasn't responsed yet
								// declined
								// tentative
								// accepted
								responseStatus: {String},
								userId: {String}?,
								picture: {String}?
							}
					form.form-inline
						input.form-control#getAttendeesEventId(placeholder='Event ID')
						button.btn.btn-default#getAttendees Get Attendees

			.cat#tags
				h2
					span.label.label-default Tags & Clubs
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Get School Tag List
						.panel-body
							p Get the tag list of a certain school that contains all categories and tags.
							ul
								li One school on tag list.
								li Can not and should not be modified by clients.
						table.table
							tbody
								tr
									th Method
									td
										code tags.school
									td
								tr
									th Params
									td
										code {Stirng}
									td School name
								tr
									th Return
									td
										code {Object}
									td The actual Tag list as a JSON/JS object
					form.form-inline
						button.btn.btn-default#tagsDefineButton Define Tags
						input.form-control#tagsSchoolName(placeholder='School Name')
						button.btn.btn-default#tagsSchoolButton Get Tags

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Get User's School Tag List
						.panel-body
							p Get the tag list that belongs to the school of the current logged in user.
						table.table
							tbody
								tr
									th Method
									td
										code tags.user
									td
								tr
									th Params
									td
										code 
									td None
								tr
									th Return
									td
										code {Object}
									td The actual Tag list as a JSON/JS object
					form.form-inline
						button.btn.btn-default#tagsUserButton Get Tags

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set calendar tags
						.panel-body
							p Calendar will have tags already set during initialization, this method is used when the user is willing to modify the default tags of the calendar.
							ul
								li !!! CALENDAR MUST BE INITIALIZED BEFORE THIS METHOD CALL !!!
								li Only new events associated with the calendar will have the new default tags.
								li Previous events will not be updated.
						table.table
							tbody
								tr
									th Method
									td
										code calendars.setTags
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Calendar Id
								tr
									td
										code {[String]}
									td Array of string containing all tags, not accumulative
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#calendarIdSetTags(placeholder='Calendar Id')
						input.form-control#calendarTags(placeholder='Tags seperated by ","')
						button.btn.btn-default#calendarTagsButton Set Tags
					em For testing purpose with this API Playground, seperate tags by ',' in the above input, no space.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set event tags
						.panel-body
							p Event will have tags already set during initialization, this method is used when the user is willing to modify the default tags of the event.
						table.table
							tbody
								tr
									th Method
									td
										code events.setTags
									td
								tr
									th(rowspan='2') Params
									td
										code {Stirng}
									td Event Id
								tr
									td
										code {[String]}
									td Array of string containing all tags, not accumulative
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#eventIdSetTags(placeholder='Event Id')
						input.form-control#eventTags(placeholder='Tags seperated by ","')
						button.btn.btn-default#eventTagsButton Set Tags
					em For testing purpose with this API Playground, seperate tags by ',' in the above input, no space.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set user tags
						.panel-body
							p Set user tag subsription, so feeds to user will be filtered.
						table.table
							tbody
								tr
									th Method
									td
										code users.setTags
									td
								tr
									th Params
									td
										code {[String]}
									td Array of string containing all tags, not accumulative
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#userTags(placeholder='Tags seperated by ","')
						button.btn.btn-default#userTagsButton Set Tags
					em For testing purpose with this API Playground, seperate tags by ',' in the above input, no space.

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Set user excluded clubs
						.panel-body
							p Default following all clubs, only clubs in the list are excluded. 
							ul
								li Calendar ID passed instead of actuall club name because that is subject to change.
						table.table
							tbody
								tr
									th Method
									td
										code users.setExcludedClubs
									td
								tr
									th Params
									td
										code {[String]}
									td An array of calendar ids
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#userClubs(placeholder='Ids seperated by ","')
						button.btn.btn-default#userClubsButton Set Excluded Clubs
					em For testing purpose with this API Playground, seperate ids by ',' in the above input, no space.

			.cat#likes
				h2
					span.label.label-default Likes
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Like an event
						.panel-body
							p A user can like an event, so there will be a subscription of only the events the user liked.
						table.table
							tbody
								tr
									th Method
									td
										code users.like
									td
								tr
									th Params
									td
										code {String}
									td Event Id
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#likeEvent(placeholder='Event Id')
						button.btn.btn-default#likeEventButton Like event

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Unlike an event
						.panel-body
							p A user can unlike an event.
						table.table
							tbody
								tr
									th Method
									td
										code users.unlike
									td
								tr
									th Params
									td
										code {String}
									td Event Id
								tr
									th Return
									td
										code {Integer}
									td 0 or 1
					form.form-inline
						input.form-control#unlikeEvent(placeholder='Event Id')
						button.btn.btn-default#unlikeEventButton Unlike
			
			.cat#subscriptions
				h2
					span.label.label-default Subscriptions
				hr

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title All calendars by user
						.panel-body
							p Get all calendars init by the user.
							code calendars.owner
					em Demo - 
						a(href="{{pathFor 'calendars'}}", target='_blank') List Calendars

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title All events by user
						.panel-body
							p Get all events created by the user.
							code events.owner
					em Demo - 
						a(href="{{pathFor 'events'}}", target='_blank') List Events

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title All calendars by school
						.panel-body
							p Get all calendars (clubs) within school's scope
							code calendars.school

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title All events by school
						.panel-body
							p Get all events withing school's scope
							code events.school

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Calendars for user
						.panel-body
							p Get the calendars the user is following, exluding excluded clubs.
							code calendars.feeds
					em Demo - 
						a(href="{{pathFor 'calendarsFeeds'}}", target='_blank') List Calendars Feeds

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Events for user
						.panel-body
							p Get the events from calendars followed by user and with matching tags.
							ul
								li Event feeds are sorted by starting date in descending order.
								li Feeds can be configured by the above tags and excluded clubs list.
							code events.feeds
					em Demo - 
						a(href="{{pathFor 'eventsFeeds'}}", target='_blank') List Events Feeds

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Liked events by user
						.panel-body
							p Get all events liked by the current user
							code events.likes

				.subcat
					.panel.panel-default
						.panel-heading
							h3.panel-title Contacts of user
							p Contact will come with an attribute called 'userId' which is used to track if the user is registered in our system. userId = Null if no user found.
						.panel-body
							p Get all contacts belong to a user
							code contacts.owner
				
			//- button#watchCalendarButton Watch Calendar
			//- button#stopWatchCalendarButton Stop Watch Calendar
			